<?php
/**
 * Created by PhpStorm.
 * User: aagrebennikov
 * Date: 10.10.2018
 * Time: 9:41
 */
/*Виджет для вывода каталогов ДСт*/

namespace app\components;

use app\models\Application;
use app\models\Gks;
use app\models\Iso;
use app\models\Npa;
use app\models\Ost;
use app\models\Ost95;
use yii\base\Widget;
use app\models\Standard;
use app\models\Fnp;
use yii\data\ActiveDataProvider;

use app\assets\DstAsset;


class DstWidget extends Widget
{
    public $trigersnames =''; //Имя переключателей. Для того чтобы были разные имена групп переключателей
    public $st_type = Application::Gost; //тип стандарта
    public $tpl = 'dst'; //шаблон для вывода списка
    public $str='';      //строка для поиска
    public $field_id;    //id поля куда вставлять строки с кодами
    public $dataProvider;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        switch ($this->st_type)
        {
            case Application::Gost:
                $query = Standard::find();
                break;
            case Application::Fnp:
                $query = Fnp::find();
                break;
            case Application::Npa:
                $query = Npa::find();
                break;
            case Application::Iso:
                $query = Iso::find();
                break;
            case Application::Gks:
                $query = Gks::find();
                break;
            case Application::Ost95:
                $query = Ost95::find();
                break;
            case Application::Ost:
                $query = Ost::find();
                break;
            default:
                $query = Standard::find();
                break;
        }

        if ($this->tpl=='dstsearch' && isset($this->str)&& trim($this->str)!='')
        {
            // изменяем запрос добавляя в его фильтрацию
            $query->andFilterWhere(['like', 'code', $this->str])
                ->orFilterWhere(['like', 'name', $this->str]);
            $this->dataProvider = new ActiveDataProvider([
                'query' => $query,
                'pagination' => false,
            ]);
        }
        else
        {
            $this->dataProvider = new ActiveDataProvider([
                'query' => $query,
                'pagination' => [
                    'pageSize' => 5,
                ],
                'sort' => [
                    'attributes' => [
                        'code',
                        'name',
                    ],
                    'defaultOrder' => [
                        'code' => SORT_ASC,
                    ],
                ],
            ]);
        }



        DstAsset::register($this->getView());
    }

    public function run()
    {

        return $this->render($this->tpl,[
            'dataProvider'=>$this->dataProvider,
            'st_type' => $this->st_type,
            'field_id' => $this->field_id,
            'trigersnames' => $this->trigersnames,
        ]);
    }

}